
@function rhythm-calc($fontSize, $size) {

	@return 1em * ($size * $_BASE_LINE_HEIGHT) / ($fontSize * $_BASE_FONT_SIZE);

}


@mixin rhythm($fontSize, $sizes: null null, $margin: null null null null, $padding: null null null null) {

	$fs: $fontSize * $_BASE_FONT_SIZE;
	$k: 1em * $_BASE_LINE_HEIGHT / $fs;

	font-size: $fs;

	// sizes
	$sizes: unpack($sizes);
	$linesHeight: nth($sizes, 2);
	@if($linesHeight and type-of($linesHeight) == number) {

		line-height: $linesHeight * $k;
		height: $linesHeight * $k;

	}
	$linesWidth: nth($sizes, 1);
	@if($linesWidth and type-of($linesWidth) == number) {

		width: $linesWidth * $k;

	}

	$margin: unpack($margin);
	@include rhythm-margin(nth($margin, 1) nth($margin, 2) nth($margin, 3) nth($margin, 4), $fontSize);

	$padding: unpack($padding);
	@include rhythm-padding(nth($padding, 1) nth($padding, 2) nth($padding, 3) nth($padding, 4), $fontSize);

}


@mixin rhythm-text($fontSize, $linesHeight, $margin: null null null null, $padding: null null null null, $widths: auto null) {

	$fs: $fontSize * $_BASE_FONT_SIZE;
	$k: 1em * $_BASE_LINE_HEIGHT / $fs;

	font-size: $fs;

	@if(type-of($linesHeight) == number) {

		line-height: $linesHeight * $k;
		height: auto;

	}

	$margin: unpack($margin);
	@include rhythm-margin(nth($margin, 1) nth($margin, 2) nth($margin, 3) nth($margin, 4), $fontSize);

	$padding: unpack($padding);
	@include rhythm-padding(nth($padding, 1) nth($padding, 2) nth($padding, 3) nth($padding, 4), $fontSize);

	$widths: unpack($widths);
	@if nth($widths, 1) == auto {

		min-width: auto;

	}
	@else if(type-of(nth($widths, 1)) == number) {

		min-width: nth($widths, 1) * $k;

	}
	@if nth($widths, 2) == auto {

		min-width: auto;

	}
	@else if(type-of(nth($widths, 2)) == number) {

		min-width: nth($widths, 2) * $k;

	}
	@else {

		max-width: ($fs * $_BASE_MAX_WIDTH);

	}

}


@mixin rhythm-text-reset {

	background-color: transparent;
	color: inherit;
	font-family: inherit;
	font-style: inherit;
	font-variant: inherit;
	font-weight: inherit;
	font-size: 1em;
	height: auto;
	// line-height: normal;
	line-height: 1;
	margin: 0;
	min-height: initial;
	min-width: initial;
	max-height: initial;
	max-width: initial;
	padding: 0;
	text-indent: initial;

}


@mixin rhythm-reset {

	@include rhythm-text-reset;

}


@mixin rhythm-margin($margin: null null null null, $fontSize: 1) {

	$margin: unpack($margin);
	$marginTop: nth($margin, 1);
	$marginRight: nth($margin, 2);
	$marginBottom: nth($margin, 3);
	$marginLeft: nth($margin, 4);

	@if($marginTop) {

		@if(type-of($marginTop) == number) {

			margin-top: rhythm-calc($fontSize, $marginTop);

		}
		@else {

			margin-top: $marginTop;

		}

	}

	@if($marginRight) {

		@if(type-of($marginRight) == number) {

			margin-right: rhythm-calc($fontSize, $marginRight);

		}
		@else {

			margin-right: $marginRight;

		}

	}

	@if($marginBottom) {

		@if(type-of($marginBottom) == number) {

			margin-bottom: rhythm-calc($fontSize, $marginBottom);

		}
		@else {

			margin-bottom: $marginBottom;

		}

	}

	@if($marginLeft) {

		@if(type-of($marginLeft) == number) {

			margin-left: rhythm-calc($fontSize, $marginLeft);

		}
		@else {

			margin-left: $marginLeft;

		}

	}

}


@mixin rhythm-padding($padding: null null null null, $fontSize: 1) {

	$padding: unpack($padding);
	$paddingTop: nth($padding, 1);
	$paddingRight: nth($padding, 2);
	$paddingBottom: nth($padding, 3);
	$paddingLeft: nth($padding, 4);

	@if($paddingTop) {

		@if(type-of($paddingTop) == number) {

			padding-top: rhythm-calc($fontSize, $paddingTop);

		}
		@else {

			padding-top: $paddingTop;

		}

	}

	@if($paddingRight) {

		@if(type-of($paddingRight) == number) {

			padding-right: rhythm-calc($fontSize, $paddingRight);

		}
		@else {

			padding-right: $paddingRight;

		}

	}

	@if($paddingBottom) {

		@if(type-of($paddingBottom) == number) {

			padding-bottom: rhythm-calc($fontSize, $paddingBottom);

		}
		@else {

			padding-bottom: $paddingBottom;

		}

	}

	@if($paddingLeft) {

		@if(type-of($paddingLeft) == number) {

			padding-left: rhythm-calc($fontSize, $paddingLeft);

		}
		@else {

			padding-left: $paddingLeft;

		}

	}

}
