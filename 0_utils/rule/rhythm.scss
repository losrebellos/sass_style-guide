
@function getRhythm($fs, $size) {

	@return 1em * ($size * $_BASE_SIZE * $_BASE_LINE_HEIGHT) / ($fs * $_BASE_FONT_SIZE);

}


@mixin rhythm($mult, $sizes: null null, $margin: null null null null, $padding: null null null null) {

	$fs: $mult * $_BASE_FONT_SIZE;
	$k: 1em * $_BASE_SIZE * $_BASE_LINE_HEIGHT / $fs;

	font-size: $fs;

	// sizes
	$sizes: unpack($sizes);
	$linesHeight: nth($sizes, 2);
	@if($linesHeight and type-of($linesHeight) == number) {

		line-height: $linesHeight * $k;
		height: $linesHeight * $k;

	}
	$linesWidth: nth($sizes, 1);
	@if($linesWidth and type-of($linesWidth) == number) {

		width: $linesWidth * $k;

	}

	$margin: unpack($margin);
	@include margin-rhythm(nth($margin, 1) nth($margin, 2) nth($margin, 3) nth($margin, 4), $k);

	$padding: unpack($padding);
	@include padding-rhythm(nth($padding, 1) nth($padding, 2) nth($padding, 3) nth($padding, 4), $k);

}


@mixin text-rhythm($mult, $lines, $margin: null null null null, $padding: null null null null) {

	$fs: $mult * $_BASE_FONT_SIZE;
	$k: 1em * $_BASE_SIZE * $_BASE_LINE_HEIGHT / $fs;

	font-size: $fs;

	@if(type-of($lines) == number) {

		line-height: $lines * $k;

	}

	$margin: unpack($margin);
	@include margin-rhythm(nth($margin, 1) nth($margin, 2) nth($margin, 3) nth($margin, 4), $k);

	$padding: unpack($padding);
	@include padding-rhythm(nth($padding, 1) nth($padding, 2) nth($padding, 3) nth($padding, 4), $k);

	max-width: $fs * $_BASE_SIZE * $_BASE_MAX_WIDTH;

}


@mixin text-rhythm-reset {

	background-color: transparent;
	color: inherit;
	font-family: inherit;
	font-style: inherit;
	font-variant: inherit;
	font-weight: inherit;
	font-size: 1em;
	height: auto;
	// line-height: normal;
	line-height: 1;
	margin: 0;
	max-width: none;
	min-height: initial;
	padding: 0;
	text-indent: initial;

}


@mixin rhythm-reset {

	@include text-rhythm-reset;

}


@mixin text-null {

	> * {

		@include text-rhythm-reset;

	}

}
